#!/bin/bash
# Script patch boot.img ƒë·ªÉ ch√®n Arch Linux rootfs (b·ªè qua c·∫£nh b√°o tar)
# Y√™u c·∫ßu: Ubuntu/Debian c√≥ s·∫µn: abootimg, cpio, tar

BOOT_IMG="boot.img"       # File boot.img g·ªëc
ARCH_ROOTFS="arch-rootfs.tar.gz"  # File rootfs Arch Linux
TMP_DIR="boot_unpack"
NEW_BOOT="boot_patched.img"

# Ki·ªÉm tra file
if [[ ! -f "$BOOT_IMG" || ! -f "$ARCH_ROOTFS" ]]; then
    echo "‚ùå Thi·∫øu boot.img ho·∫∑c arch-rootfs.tar.gz"
    exit 1
fi

# C√†i c√¥ng c·ª• n·∫øu ch∆∞a c√≥
sudo apt update
sudo apt install -y abootimg cpio

# B∆∞·ªõc 1: Gi·∫£i n√©n boot.img
rm -rf "$TMP_DIR"
mkdir "$TMP_DIR"
cd "$TMP_DIR" || exit
abootimg -x "../$BOOT_IMG"

# B∆∞·ªõc 2: Gi·∫£i n√©n initramfs
mkdir initramfs
cd initramfs || exit
cat ../initrd.img | gzip -d | cpio -idmv

# B∆∞·ªõc 3: Ch√®n Arch rootfs (b·ªè qua c·∫£nh b√°o tar)
mkdir -p arch
echo "üì¶ Gi·∫£i n√©n Arch rootfs..."
tar --warning=no-unknown-keyword --no-xattrs -xzf "../../$ARCH_ROOTFS" -C arch

# (T√πy ch·ªânh init script n·∫øu c·∫ßn, vd: init -> chroot v√†o Arch)
cat << 'EOF' > init
#!/bin/sh
mount -t proc proc /proc
mount -t sysfs sys /sys
mount -o bind /dev /dev
exec chroot /arch /bin/bash
EOF
chmod +x init

# B∆∞·ªõc 4: ƒê√≥ng g√≥i l·∫°i initramfs
find . | cpio -o -H newc | gzip > ../new_initrd.img
cd ..

# B∆∞·ªõc 5: T·∫°o boot.img m·ªõi
abootimg --create "../$NEW_BOOT" -k zImage -r new_initrd.img -f bootimg.cfg

cd ..
echo "‚úÖ ƒê√£ t·∫°o $NEW_BOOT"
